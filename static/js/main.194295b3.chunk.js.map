{"version":3,"sources":["Register.js","Controller.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Register","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","username","formName","formPass","status","updateName","bind","assertThisInitialized","updatePassword","handleSubmit","method","headers","Content-Type","body","createBody","event","setState","target","value","e","_this2","preventDefault","fetch","buildRequest","then","response","json","data","code","alert","react_default","a","createElement","onSubmit","type","onChange","React","Component","Controller","className","src","logo","alt","src_Register","App","src_Controller","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"4RA4EeA,cAvEd,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACZC,SAAU,QACVC,SAAU,GACVC,SAAU,GACVC,OAAQ,IAGTX,EAAKY,WAAaZ,EAAKY,WAAWC,KAAhBZ,OAAAa,EAAA,EAAAb,CAAAD,IAClBA,EAAKe,eAAiBf,EAAKe,eAAeF,KAApBZ,OAAAa,EAAA,EAAAb,CAAAD,IACtBA,EAAKgB,aAAehB,EAAKgB,aAAaH,KAAlBZ,OAAAa,EAAA,EAAAb,CAAAD,IAZHA,8EAgBjB,MAAO,CACNiB,OAAQ,OACRC,QAAS,CACLC,eAAgB,qCAEpBC,KAAMjB,KAAKkB,mDAKZ,MAAO,YAAYlB,KAAKI,MAAME,SAAS,aAAgBN,KAAKI,MAAMG,4CAGxDY,GACVnB,KAAKoB,SAAS,CAACd,SAAUa,EAAME,OAAOC,+CAGxBH,GACdnB,KAAKoB,SAAS,CAACb,SAAUY,EAAME,OAAOC,6CAG1BC,GAAE,IAAAC,EAAAxB,KAWd,OAVAuB,EAAEE,iBACFC,MA1CuB,oCA0CC1B,KAAK2B,gBAC3BC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACY,IAAdA,EAAKC,KACPR,EAAKJ,SAAS,CAACf,SAAUmB,EAAKpB,MAAME,WAEpC2B,MAAMF,EAAKvB,WAGP,mCAIP,OACC0B,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,SAAIpC,KAAKI,MAAMC,WAEhB6B,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,QAAMC,SAAUrC,KAAKa,cAArB,QACMqB,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOhB,MAAStB,KAAKI,MAAME,SAAUiC,SAAYvC,KAAKS,aAAayB,EAAAC,EAAAC,cAAA,WAFhF,YAGUF,EAAAC,EAAAC,cAAA,WACTF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWhB,MAAStB,KAAKI,MAAMG,SAAUgC,SAAYvC,KAAKY,iBAAiBsB,EAAAC,EAAAC,cAAA,WACvFF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAAShB,MAAM,cACpBY,EAAAC,EAAAC,cAAA,oBAjEQI,IAAMC,WCadC,mLAXb,OACAR,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACRT,EAAAC,EAAAC,cAAA,UAAQO,UAAU,cAChBT,EAAAC,EAAAC,cAAA,OAAKQ,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCZ,EAAAC,EAAAC,cAACW,EAAD,eANcN,aCWVO,mLARZ,OACCd,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACa,EAAD,cAJcR,aCOES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.194295b3.chunk.js","sourcesContent":["import React from 'react';\n\nconst registerEndpoint = 'https://api.stya.net/nim/register';\n\nclass Register extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tusername: \"Guest\",\n\t\t\tformName: \"\",\n\t\t\tformPass: \"\",\n\t\t\tstatus: \"\",\n\t\t}\n\n\t\tthis.updateName = this.updateName.bind(this);\n\t\tthis.updatePassword = this.updatePassword.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\n\tbuildRequest(){\n\t\treturn {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n    \t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t},\n\t\t\tbody: this.createBody()\t\n\t\t};\n\t}\n\n\tcreateBody(){\n\t\treturn \"username=\"+this.state.formName+\"&\"+\"password=\"+this.state.formPass;\n\t}\n\n\tupdateName(event){\n\t\tthis.setState({formName: event.target.value});\n\t}\n\n\tupdatePassword(event){\n\t\tthis.setState({formPass: event.target.value});\n\t}\n\n\thandleSubmit(e){\n\t\te.preventDefault();\n\t\tfetch(registerEndpoint, this.buildRequest())\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tif(data.code === 0){\n\t\t\t\t\tthis.setState({username: this.state.formName});\n\t\t\t\t} else {\n\t\t\t\t\talert(data.status);\n\t\t\t\t}\n\t\t\t});\n\t\treturn false;\n\t}\n  \n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div>\n\t\t\t\t\t<b>{this.state.username}</b>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t    \t<form onSubmit={this.handleSubmit}>\n\t\t\t\t\t\t  Nama:<br/>\n\t\t\t\t\t\t  <input type=\"text\" value = {this.state.formName} onChange = {this.updateName}/><br/>\n\t\t\t\t\t\t  Password:<br/>\n\t\t\t\t\t\t  <input type=\"password\" value = {this.state.formPass} onChange = {this.updatePassword}/><br/>\n\t\t\t\t\t\t  <input type=\"submit\" value=\"Register\"/>\n\t\t\t     </form><br/>\n\t\t\t     </div>\n\t\t  </div>\n\t\t);\n  }\n}\n\nexport default Register;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport Register from './Register.js';\n\nclass Controller extends Component{\n\trender(){\n\t\treturn (\n\t\t<div className=\"App\">\n\t        <header className=\"App-header\">\n\t          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t          <Register />\n\t        </header>\n\t      </div>\n\t    );  \n\t}\n}\n\nexport default Controller;","import React, { Component } from 'react';\nimport './App.css';\nimport Controller from './Controller.js';\n\n\nclass App extends Component{\n  render(){\n   return (\n    <div>\n    <Controller /> \n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}